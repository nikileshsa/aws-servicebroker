AWSTemplateFormatVersion: 2010-09-09
Description: >-
  A Dragonfly  ElasticRedis template that stands up an ElasticCache Replication Group Multi-AZ
  in a particular VPC specifying a Subnet Group and a Security Group. The VpcId
  is not directly referenced by the Replication Group resource and is instead
  inferred by the Security Group and Subnet Group.
Metadata:
  AWS::ServiceBroker::Specification:
    Version: 1.0
    Tags:
      - AWS
      - RDS
      - rediscache
      - redis
    Name: rediscache
    DisplayName: Dragonfly ElasticRedis
    LongDescription: Dragonfly  ElasticRedis is a web service that leverages AWS ElasticCache to set
      up, manage, and scale distributed in-memory cache.It provides a high performance, resizeable, and cost-effective in-memory cache,
      while removing the complexity associated with deploying and managing a distributed
      cache environment.
    DocumentationUrl: https://aws.amazon.com/documentation/elasticache/
    ProviderDisplayName: Amazon Web Services
    ServicePlans:
      production:
        DisplayName: Production
        Description: Configuration designed for production deployments
        LongDescription: Creates an Amazon ElastiCache for redis, optimised for
          production use
        Cost: https://aws.amazon.com/elasticache/pricing/
        ParameterValues: {}
      custom:
        DisplayName: Custom
        Description: Custom Configuration for Advanced deployments
        LongDescription: Creates an Amazon ElastiCache for redis with custom configuration
        Cost: https://aws.amazon.com/elasticache/pricing/
        ParameterValues: {}
Parameters:
  CacheNodeType:
    Description: The instance type the nodes will launch under.
    Type: String
    Default: cache.m3.medium
    AllowedValues:
      - cache.t2.micro
      - cache.t2.small
      - cache.t2.medium
      - cache.m3.medium
      - cache.m3.large
      - cache.m3.xlarge
      - cache.m3.2xlarge
      - cache.r3.large
      - cache.r3.xlarge
      - cache.r3.2xlarge
      - cache.r3.4xlarge
      - cache.r3.8xlarge
  MultiAZSupport:
    Description: >-
      Indicates whether Multi-AZ is enabled. When Multi-AZ is enabled, a
      read-only replica is automatically promoted to a read-write primary
      cluster if the existing primary cluster fails. If you specify true, you
      must specify a value greater than 1 for the NumCacheClusters property.
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  ReplicasPerNodeGroup:
    Description: >-
      The number of cache clusters for this replication group. If MultiAZ
      support is enabled, you must specify a value greater than 1.
    Default: '2'
    Type: Number
    MinValue: '1'
    MaxValue: '6'
  RedisPort:
    Description: >-
      The port number on which each member of the replication group accepts
      connections.
    Type: Number
    Default: '6379'
    MinValue: '1'
    MaxValue: '65535'
  ReplicationGroupDescription:
    Description: The description of the replication group.
    Type: String
    Default: Dragonfly deployment replication group
  VpcId:
    Description: The VPC to create this ReplicationGroup under
    Type: 'AWS::EC2::VPC::Id'
  CidrIp:
    Description: The CIDR you want to access to the Replication Group
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    MinLength: '9'
    MaxLength: '18'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x
  SnapshotRetentionLimit:
    Description: >-
      The number of days that ElastiCache retains automatic snapshots before
      deleting them.
    Type: Number
    Default: '7'
  SnapshotWindow:
    Description: >-
      The time range (in UTC) when ElastiCache takes a daily snapshot of your
      node group.
    Type: String
    Default: '05:00-09:00'
    AllowedPattern: '\d{2}:\d{2}-\d{2}:\d{2}'
    ConstraintDescription: 'must be a valid timestamp range, for example 05:00-09:00'
  PreferredMaintenanceWindow:
    Description: >-
      The weekly time range during which system maintenance can occur. Use the
      following format to specify a time range: ddd:hh24:mi-ddd:hh24:mi (24H
      Clock UTC).
    Type: String
    Default: 'sun:22:00-sun:23:30'
    AllowedPattern: >-
      (mon|tue|wed|thu|fri|sat|sun):\d{2}:\d{2}-(mon|tue|wed|thu|fri|sat|sun):\d{2}:\d{2}
    ConstraintDescription: >-
      must be a valid timestamp range with day of week, for example
      sun:22:00-sun:23:30
  SubnetA:
    Description: >-
      One of the subnets you would like the ReplicationGroup to be created in.
      In this Dragonfly deployment we only accept 2 subnets
    Type: 'AWS::EC2::Subnet::Id'
  SubnetB:
    Description: >-
      One of the subnets you would like the ReplicationGroup to be created in.
      In this Dragonfly deployment we only accept 2 subnets
    Type: 'AWS::EC2::Subnet::Id'
Resources:
  PasswordGeneratorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: Policy
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - ssm:DeleteParameter
                  - ssm:PutParameter
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*
  PasswordGenerator:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3
          import cfnresponse
          import secrets
          import string

          alphabet = string.ascii_letters + string.digits
          ssm = boto3.client('ssm')

          def handler(event, context):
            try:
              # Generate an alphanumeric password of the requested length (default: 12)
              length = int(event['ResourceProperties'].get('Length', 20))
              password = ''.join(secrets.choice(alphabet) for _ in range(length))

              # Use the stack name and logical resource ID in the parameter name to ensure uniqueness
              parameter_name = '/${AWS::StackName}/' + event['LogicalResourceId']
              physical_resource_id = parameter_name

              response_data = {'ParameterName': parameter_name, 'Password': password}

              if event['RequestType'] == 'Delete':
                try:
                  ssm.delete_parameter(Name=parameter_name)
                except ssm.exceptions.ParameterNotFound:
                  pass
              else:
                ssm.put_parameter(Name=parameter_name, Value=password, Type='SecureString', Overwrite=True)

              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physical_resource_id)
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
      Handler: index.handler
      Role: !GetAtt PasswordGeneratorRole.Arn
      Runtime: python3.6
  RandomPassword:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt PasswordGenerator.Arn
  ElastiCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      AutoMinorVersionUpgrade: 'true'
      CacheNodeType: !Ref CacheNodeType
      CacheSubnetGroupName: !Ref SubnetGroup
      Engine: redis
      EngineVersion: '5.0.0'
      NumCacheNodes: 1
      Port: !Ref RedisPort
      VpcSecurityGroupIds:
      - !Ref SecurityGroup
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for Dragonfly deployment Replication Group
      SecurityGroupIngress:
        - CidrIp: !Ref CidrIp
          FromPort: !Ref RedisPort
          ToPort: !Ref RedisPort
          IpProtocol: tcp
      VpcId: !Ref VpcId
  SubnetGroup:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      Description: Subnet Group for Dragonfly deployment Replication Group
      SubnetIds:
        - !Ref SubnetA
        - !Ref SubnetB
  ReplicationGroup:
    Type: 'AWS::ElastiCache::ReplicationGroup'
    Properties:
      AutomaticFailoverEnabled: !Ref MultiAZSupport
      CacheNodeType: !Ref CacheNodeType
      CacheSubnetGroupName: !Ref SubnetGroup
      Engine: redis
      ReplicasPerNodeGroup: !Ref ReplicasPerNodeGroup
      Port: !Ref RedisPort
      PreferredMaintenanceWindow: !Ref PreferredMaintenanceWindow
      ReplicationGroupDescription: !Ref ReplicationGroupDescription
      SecurityGroupIds:
        - !GetAtt 
          - SecurityGroup
          - GroupId
      SnapshotRetentionLimit: !Ref SnapshotRetentionLimit
      SnapshotWindow: !Ref SnapshotWindow
      NumNodeGroups: 2
      TransitEncryptionEnabled: true
      AtRestEncryptionEnabled: true
      AuthToken: !Ref RandomPassword
Outputs:
  ConfigurationEndPointAddress:
    Description: 'The DNS address of the primary read-write cache node.'
    Value: !GetAtt 'ReplicationGroup.ConfigurationEndPoint.Address'
    Export:
      Name: !Sub '${AWS::StackName}-PrimaryEndPointAddress'
  ConfigurationEndPointPort:
    Description: 'The port that the primary read-write cache engine is listening on.'
    Value: !GetAtt 'ReplicationGroup.ConfigurationEndPoint.Port'
    Export:
      Name: !Sub '${AWS::StackName}-ConfigurationEndPointPort'
  RandomPassword: # This exposes the password in cleartext; don't do this at home :)
    Value: !GetAtt RandomPassword.Password
  RandomPasswordParameterName:
    Value: !GetAtt RandomPassword.ParameterName
